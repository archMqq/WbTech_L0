// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "L0/internal/database/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderCache is a mock of OrderCache interface.
type MockOrderCache struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCacheMockRecorder
}

// MockOrderCacheMockRecorder is the mock recorder for MockOrderCache.
type MockOrderCacheMockRecorder struct {
	mock *MockOrderCache
}

// NewMockOrderCache creates a new mock instance.
func NewMockOrderCache(ctrl *gomock.Controller) *MockOrderCache {
	mock := &MockOrderCache{ctrl: ctrl}
	mock.recorder = &MockOrderCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCache) EXPECT() *MockOrderCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOrderCache) Get(id string) *models.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Order)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockOrderCacheMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderCache)(nil).Get), id)
}

// Set mocks base method.
func (m *MockOrderCache) Set(id string, order *models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", id, order)
}

// Set indicates an expected call of Set.
func (mr *MockOrderCacheMockRecorder) Set(id, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOrderCache)(nil).Set), id, order)
}

// MockMemoryCache is a mock of MemoryCache interface.
type MockMemoryCache struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryCacheMockRecorder
}

// MockMemoryCacheMockRecorder is the mock recorder for MockMemoryCache.
type MockMemoryCacheMockRecorder struct {
	mock *MockMemoryCache
}

// NewMockMemoryCache creates a new mock instance.
func NewMockMemoryCache(ctrl *gomock.Controller) *MockMemoryCache {
	mock := &MockMemoryCache{ctrl: ctrl}
	mock.recorder = &MockMemoryCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemoryCache) EXPECT() *MockMemoryCacheMockRecorder {
	return m.recorder
}

// StartCollector mocks base method.
func (m *MockMemoryCache) StartCollector() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCollector")
}

// StartCollector indicates an expected call of StartCollector.
func (mr *MockMemoryCacheMockRecorder) StartCollector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCollector", reflect.TypeOf((*MockMemoryCache)(nil).StartCollector))
}

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockOrderRepo) GetAllOrders() (map[string]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].(map[string]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderRepoMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderRepo)(nil).GetAllOrders))
}

// GetOrderByID mocks base method.
func (m *MockOrderRepo) GetOrderByID(orderUID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepoMockRecorder) GetOrderByID(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderByID), orderUID)
}

// OrderExists mocks base method.
func (m *MockOrderRepo) OrderExists(orderUID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderExists", orderUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderExists indicates an expected call of OrderExists.
func (mr *MockOrderRepoMockRecorder) OrderExists(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderExists", reflect.TypeOf((*MockOrderRepo)(nil).OrderExists), orderUID)
}

// SaveOrder mocks base method.
func (m *MockOrderRepo) SaveOrder(order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderRepoMockRecorder) SaveOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepo)(nil).SaveOrder), order)
}
